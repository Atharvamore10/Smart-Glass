#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <SoftwareSerial.h>

#define OLED_ADDR   0x3C
SoftwareSerial mySerial(6, 5);//RX,TX
Adafruit_SSD1306 display(-1);

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

void setup()   {                
  
  display.begin(SSD1306_SWITCHCAPVCC,OLED_ADDR);//if it doesnt work try display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR,false)
  display.clearDisplay();
  display.display();
  Serial.begin(9600);
  mySerial.begin(9600);

  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  drawBitMap(0,0);
  display.display();
  delay(2000);
  display.clearDisplay();
  display.clearDisplay();
}

void loop() {

  
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(5,17);


while(mySerial.available()){

  
  
  String hh = mySerial.readStringUntil(':');

  
  String mm =  mySerial.readStringUntil(':');

  String ss =  mySerial.readStringUntil(':');

  String spm = mySerial.readStringUntil('/');

  String call = mySerial.readStringUntil(':');

  String iName = mySerial.readStringUntil(':');

  String iNum = mySerial.readStringUntil('/');

  String msg = mySerial.readStringUntil(':');

  String mName = mySerial.readStringUntil(':');

  String mBody = mySerial.readStringUntil('/');

  String battery = mySerial.readStringUntil('/');
  

//Serial.println(iNum);
display.setTextSize(1);
display.setCursor(50,0);
display.print("      ");
display.print(battery);
display.print("%");
display.setCursor(5,17);
display.setTextSize(2);
if(call=="1")
{
  //Serial.print("Ringing");
  if(iName=="Unknown")
  {
  display.setTextSize(1);
  display.print("   ");
  display.print(iNum);
  display.setTextSize(2);
  display.print("\n  Calling");
  }
  else
  {
  display.print("  "+iName);
  display.print("\n  Calling");
  }
  display.display();
  display.clearDisplay();

}
else if(msg=="1")
{
  display.setCursor(0,0);
  display.print("Message\nfrom\n ");
  display.print(mName);
  display.display();
  delay(4000);
  display.clearDisplay();
  display.setCursor(5,17);
  display.setTextSize(1);
  display.print(mBody);
  display.display();
  delay(6000);
  display.clearDisplay();
}
else
{
if(hh.length()==1)
{
  display.print("0");
  display.print(hh);
}
else
display.print(hh);
display.print(":");
if(mm.length()==1)
{
  display.print("0");
  display.print(mm);
}
else
{
display.print(mm);
}
display.print(":");
if(ss.length()==1)
{
  display.print("0");
  display.print(ss);
}
else
{
  display.print(ss);
}
int sspm=spm.toInt();
if(sspm==1)
{
display.print("PM");  
}
else
{
display.print("AM");
}

display.display();
display.clearDisplay();

}

}


}
const unsigned char PROGMEM fly [] = {
  // size is 56 x 64 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xf1, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xf1, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x0f, 0xff, 0xf1, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xcf, 0xff, 0xf1, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xe3, 0xcf, 0xff, 0xe3, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xe7, 0xc7, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xe7, 0xe7, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xe7, 0xe3, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xe7, 0xf3, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xe7, 0xf9, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xe7, 0xfc, 0x7c, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xcf, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xcf, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xf9, 0xf8, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xf9, 0xfc, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0x7c, 0x33, 0x86, 0x71, 0xfc, 0xc1, 0xc3, 0x9c, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xfe, 0x3c, 0x03, 0x06, 0x21, 0xfc, 0x81, 0x83, 0x1c, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0x18, 0x02, 0x46, 0x33, 0xfc, 0x03, 0x23, 0x1c, 0x7f, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xc8, 0x04, 0x4c, 0x27, 0xfe, 0x13, 0x26, 0x18, 0x7f, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xf9, 0xc9, 0x24, 0x89, 0x27, 0xff, 0x92, 0x44, 0x10, 0x7f, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xf0, 0x01, 0x20, 0x03, 0x00, 0xff, 0x10, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xfe, 0x3f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xdf,
0xfe, 0xbf, 0xf0, 0xa7, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xcf, 0xff, 0xef, 0xf8, 0x7f, 0xff, 0xdf,
0xfc, 0xbf, 0xe4, 0x2f, 0xff, 0xff, 0xff, 0x97, 0xff, 0xdf, 0xff, 0xcf, 0xf9, 0x7f, 0xff, 0x9f,
0xf8, 0x4b, 0xcd, 0x22, 0x13, 0x01, 0xff, 0x0c, 0x96, 0x89, 0x0f, 0xcf, 0xf0, 0xc8, 0x48, 0xbf,
0xf9, 0x57, 0xd9, 0x42, 0xb2, 0x01, 0xfe, 0x28, 0x24, 0x94, 0x1f, 0xb1, 0xe0, 0x80, 0x08, 0xbf,
0xf0, 0x47, 0xc0, 0x50, 0x32, 0x2b, 0xfe, 0x6a, 0x88, 0x15, 0x5f, 0x97, 0xe4, 0xaa, 0x99, 0x3f,
0xf0, 0xc3, 0xcd, 0x18, 0x98, 0x6d, 0xbe, 0x61, 0x80, 0x13, 0xcf, 0x8f, 0xe6, 0x1a, 0x00, 0x1f,
0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
};
void drawBitMap(int x, int y)
{
  display.drawBitmap(x, y,  fly, 128, 64, 1);
  
}
